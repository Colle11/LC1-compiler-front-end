-- -*- haskell -*-
-- This Alex file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}
module LexBlu where



import qualified Data.Bits
import Data.Word (Word8)
}


$l = [a-zA-Z\192 - \255] # [\215 \247]    -- isolatin1 letter FIXME
$c = [A-Z\192-\221] # [\215]    -- capital isolatin1 letter FIXME
$s = [a-z\222-\255] # [\247]    -- small isolatin1 letter FIXME
$d = [0-9]                -- digit
$i = [$l $d _ ']          -- identifier character
$u = [\0-\255]          -- universal: any character

@rsyms =    -- symbols and non-identifier-like reserved words
   \: | \: \= | \; | \( | \) | \, | \- \> | \* \: \= | \+ \: \= | \/ \: \= | \- \: \= | \^ \: \= | \& \: \= | \| \: \= | \< | \> | \| \| | \& \& | \= | \< \> | \< \= | \> \= | \+ | \- | \* | \/ | \% | \[ | \] | \& | \! | \$

:-
"--" [.]* ; -- Toss single line comments

$white+ ;
t r u e | f a l s e { tok (\p s -> PT p (eitherResIdent (T_PBool . share) s)) }
b r e a k { tok (\p s -> PT p (eitherResIdent (T_PBreak . share) s)) }
c o n t i n u e { tok (\p s -> PT p (eitherResIdent (T_PContinue . share) s)) }
w r i t e I n t { tok (\p s -> PT p (eitherResIdent (T_PWriteInt . share) s)) }
w r i t e R e a l { tok (\p s -> PT p (eitherResIdent (T_PWriteFloat . share) s)) }
w r i t e C h a r { tok (\p s -> PT p (eitherResIdent (T_PWriteChar . share) s)) }
w r i t e S t r i n g { tok (\p s -> PT p (eitherResIdent (T_PWriteString . share) s)) }
r e a d I n t { tok (\p s -> PT p (eitherResIdent (T_PReadInt . share) s)) }
r e a d R e a l { tok (\p s -> PT p (eitherResIdent (T_PReadFloat . share) s)) }
r e a d C h a r { tok (\p s -> PT p (eitherResIdent (T_PReadChar . share) s)) }
r e a d S t r i n g { tok (\p s -> PT p (eitherResIdent (T_PReadString . share) s)) }
@rsyms { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
$l ($l | $d | \_)* { tok (\p s -> PT p (eitherResIdent (T_PIdent . share) s)) }
$d + { tok (\p s -> PT p (eitherResIdent (T_PInteger . share) s)) }
$d + \. $d + (e \- ? $d +)? { tok (\p s -> PT p (eitherResIdent (T_PReal . share) s)) }
\' ($u # [\' \\]| \\ [\' \\ n t]) \' { tok (\p s -> PT p (eitherResIdent (T_PChar . share) s)) }
\" ($u # [\" \\]| \\ [\" \\ n t]) * \" { tok (\p s -> PT p (eitherResIdent (T_PString . share) s)) }

$l $i*   { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }





{

tok :: (Posn -> String -> Token) -> (Posn -> String -> Token)
tok f p s = f p s

share :: String -> String
share = id

data Tok =
   TS !String !Int    -- reserved words and symbols
 | TL !String         -- string literals
 | TI !String         -- integer literals
 | TV !String         -- identifiers
 | TD !String         -- double precision float literals
 | TC !String         -- character literals
 | T_PIdent !String
 | T_PInteger !String
 | T_PReal !String
 | T_PChar !String
 | T_PString !String
 | T_PBool !String
 | T_PBreak !String
 | T_PContinue !String
 | T_PWriteInt !String
 | T_PWriteFloat !String
 | T_PWriteChar !String
 | T_PWriteString !String
 | T_PReadInt !String
 | T_PReadFloat !String
 | T_PReadChar !String
 | T_PReadString !String

 deriving (Eq,Show,Ord)

data Token =
   PT  Posn Tok
 | Err Posn
  deriving (Eq,Show,Ord)

tokenPos :: [Token] -> String
tokenPos (PT (Pn _ l c) _ :_) = "line " ++ show l ++ " column " ++ show c
tokenPos (Err (Pn _ l c) :_) = "line " ++ show l ++ " column " ++ show c
tokenPos _ = "end of file"

tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p) = p

tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t@(PT p _) = (posLineCol p, prToken t)

prToken :: Token -> String
prToken t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  PT _ (T_PIdent s) -> s
  PT _ (T_PInteger s) -> s
  PT _ (T_PReal s) -> s
  PT _ (T_PChar s) -> s
  PT _ (T_PString s) -> s
  PT _ (T_PBool s) -> s
  PT _ (T_PBreak s) -> s
  PT _ (T_PContinue s) -> s
  PT _ (T_PWriteInt s) -> s
  PT _ (T_PWriteFloat s) -> s
  PT _ (T_PWriteChar s) -> s
  PT _ (T_PWriteString s) -> s
  PT _ (T_PReadInt s) -> s
  PT _ (T_PReadFloat s) -> s
  PT _ (T_PReadChar s) -> s
  PT _ (T_PReadString s) -> s


data BTree = N | B String Tok BTree BTree deriving (Show)

eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) | s < a  = treeFind left
                              | s > a  = treeFind right
                              | s == a = t

resWords :: BTree
resWords = b "Array" 28 (b "-" 14 (b "(" 7 (b "&" 4 (b "$" 2 (b "!" 1 N N) (b "%" 3 N N)) (b "&:=" 6 (b "&&" 5 N N) N)) (b "+" 11 (b "*" 9 (b ")" 8 N N) (b "*:=" 10 N N)) (b "," 13 (b "+:=" 12 N N) N))) (b ";" 21 (b "/:=" 18 (b "->" 16 (b "-:=" 15 N N) (b "/" 17 N N)) (b ":=" 20 (b ":" 19 N N) N)) (b "=" 25 (b "<=" 23 (b "<" 22 N N) (b "<>" 24 N N)) (b ">=" 27 (b ">" 26 N N) N)))) (b "goto" 42 (b "const" 35 (b "^:=" 32 (b "[" 30 (b "Pt" 29 N N) (b "]" 31 N N)) (b "char" 34 (b "bool" 33 N N) N)) (b "end" 39 (b "else" 37 (b "do" 36 N N) (b "elseif" 38 N N)) (b "for" 40 N N))) (b "string" 49 (b "label" 46 (b "int" 44 (b "if" 43 N N) (b "is" 45 N N)) (b "routines" 48 (b "real" 47 N N) N)) (b "while" 53 (b "valres" 51 (b "then" 50 N N) (b "var" 52 N N)) (b "||" 55 (b "|:=" 54 N N) N))))
   where b s n = let bs = id s
                  in B bs (TS bs n)

unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '"':[]    -> []
    c:cs      -> c : unesc cs
    _         -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
      deriving (Eq, Show,Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case  s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
 where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
